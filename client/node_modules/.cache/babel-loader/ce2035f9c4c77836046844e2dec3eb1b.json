{"ast":null,"code":"import { FETCH_ALL, CREATE, UPDATE, LIKE, DELETE, FETCH_BY_SEARCH } from \"../constant/actionTypes\";\nexport default (function () {\n  let posts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FETCH_ALL:\n      return action.payload;\n\n    case FETCH_BY_SEARCH:\n      return action.payload;\n\n    case CREATE:\n      return [...posts, action.payload];\n\n    case UPDATE:\n    case LIKE:\n      return posts.map(post => post.id === action.payload._id ? action.payload : post);\n\n    case DELETE:\n      return posts.filter(post => post._id !== action.payload);\n\n    default:\n      return posts;\n  }\n});","map":{"version":3,"sources":["/home/decoz/Projects/ReactJS/mern_memo_project/client/src/reducers/posts.js"],"names":["FETCH_ALL","CREATE","UPDATE","LIKE","DELETE","FETCH_BY_SEARCH","posts","action","type","payload","map","post","id","_id","filter"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,MAA5B,EAAoCC,IAApC,EAA0CC,MAA1C,EAAkDC,eAAlD,QAAyE,yBAAzE;AACA,gBAAe,YAAwB;AAAA,MAAvBC,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AACnC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKR,SAAL;AACI,aAAOO,MAAM,CAACE,OAAd;;AACJ,SAAKJ,eAAL;AACI,aAAOE,MAAM,CAACE,OAAd;;AACJ,SAAKR,MAAL;AACI,aAAO,CAAE,GAAGK,KAAL,EAAYC,MAAM,CAACE,OAAnB,CAAP;;AACJ,SAAKP,MAAL;AACA,SAAKC,IAAL;AACI,aAAOG,KAAK,CAACI,GAAN,CAAWC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYL,MAAM,CAACE,OAAP,CAAeI,GAA3B,GAAiCN,MAAM,CAACE,OAAxC,GAAkDE,IAAtE,CAAP;;AACJ,SAAKP,MAAL;AACI,aAAOE,KAAK,CAACQ,MAAN,CAAcH,IAAD,IAAUA,IAAI,CAACE,GAAL,KAAaN,MAAM,CAACE,OAA3C,CAAP;;AACJ;AACI,aAAOH,KAAP;AAbR;AAeH,CAhBD","sourcesContent":["import { FETCH_ALL, CREATE, UPDATE, LIKE, DELETE, FETCH_BY_SEARCH } from \"../constant/actionTypes\"\nexport default (posts = [], action) => {\n    switch (action.type) {\n        case FETCH_ALL:\n            return action.payload\n        case FETCH_BY_SEARCH:\n            return action.payload\n        case CREATE:\n            return [ ...posts, action.payload]\n        case UPDATE :\n        case LIKE :\n            return posts.map((post) => post.id === action.payload._id ? action.payload : post)\n        case DELETE :\n            return posts.filter((post) => post._id !== action.payload )\n        default:\n            return posts\n    }\n}"]},"metadata":{},"sourceType":"module"}