{"ast":null,"code":"import * as api from '../api';\nimport { FETCH_ALL, CREATE, DELETE, UPDATE, LIKE } from '../constant/actionTypes';\nexport const getPosts = () => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.fetchPosts();\n    dispatch({\n      type: FETCH_ALL,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getPostBySearch = searchQuery => async dispatch => {\n  try {\n    const {\n      data: {\n        data\n      }\n    } = await api.fetchPostBySearch(searchQuery);\n    console.log(data);\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const createPost = post => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.createPost(post);\n    dispatch({\n      type: CREATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updatePost = (id, post) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updatePost(id, post);\n    dispatch({\n      type: UPDATE,\n      payload: data\n    });\n    dispatch(getPosts());\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deletePost = id => async dispatch => {\n  try {\n    await api.deletePost(id);\n    dispatch({\n      type: DELETE,\n      payload: id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const likePost = id => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.likePost(id);\n    dispatch({\n      type: LIKE,\n      payload: data\n    });\n    dispatch(getPosts());\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/home/decoz/Projects/ReactJS/mern_memo_project/client/src/actions/posts.js"],"names":["api","FETCH_ALL","CREATE","DELETE","UPDATE","LIKE","getPosts","dispatch","data","fetchPosts","type","payload","error","console","log","getPostBySearch","searchQuery","fetchPostBySearch","createPost","post","updatePost","id","deletePost","likePost"],"mappings":"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","sourcesContent":["import * as api from '../api'\nimport { FETCH_ALL, CREATE, DELETE, UPDATE, LIKE } from '../constant/actionTypes'\n\nexport const getPosts = () => async (dispatch) => {\n    try {\n        const { data } = await api.fetchPosts()\n\n        dispatch({ type : FETCH_ALL , payload : data })\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport const getPostBySearch = (searchQuery) => async (dispatch) => {\n  try {\n    const {data : { data } } = await api.fetchPostBySearch(searchQuery)\n\n    console.log(data)\n  } catch (error) {\n    console.log(error)\n  }\n}\n\nexport const createPost = (post) => async (dispatch) => {\n    try {\n      const { data } = await api.createPost(post);\n  \n      dispatch({ type: CREATE, payload: data });\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  \n  export const updatePost = (id, post) => async (dispatch) => {\n    try {\n      const { data } = await api.updatePost(id, post)\n      \n      dispatch({ type : UPDATE, payload : data })\n      \n      dispatch(getPosts())\n    } catch (error) {\n      console.log(error)      \n  }\n}\n\nexport const deletePost = (id) => async (dispatch) => {\n  try {\n    await api.deletePost(id)\n\n    dispatch({ type : DELETE, payload : id })\n  } catch (error) {\n    console.log(error)\n  }\n}\n\nexport const likePost = (id) => async (dispatch) => {\n  try {\n    const { data } = await api.likePost(id)\n\n    dispatch({ type : LIKE , payload : data })\n    dispatch(getPosts())\n  } catch (error) {\n    console.log(error)\n  }\n}"]},"metadata":{},"sourceType":"module"}