{"ast":null,"code":"import _objectSpread from\"/home/decoz/Projects/ReactJS/mern_memo_project/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/home/decoz/Projects/ReactJS/mern_memo_project/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState}from'react';import{TextField,Button,Typography,Paper}from'@material-ui/core';import{useDispatch}from'react-redux';import FileBase from'react-file-base64';import{useSelector}from'react-redux';import useStyles from'./styles';import{createPost,updatePost,getPosts}from'../../actions/posts';import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";var Form=function Form(_ref){var currentId=_ref.currentId,setCurrentId=_ref.setCurrentId;var classes=useStyles();var _useState=useState({creator:'',title:'',message:'',tags:'',selectedFile:''}),_useState2=_slicedToArray(_useState,2),postData=_useState2[0],setPostData=_useState2[1];var post=useSelector(function(state){return currentId?state.posts.find(function(p){return p._id===currentId;}):null;});// posts is from reducer\nvar dispatch=useDispatch();useEffect(function(){if(post)setPostData(post);},[post]);var handleSubmit=function handleSubmit(e){e.preventDefault();if(currentId){dispatch(updatePost(currentId,postData));}else{dispatch(createPost(postData));}clear();dispatch(getPosts());};var clear=function clear(){setCurrentId(0);setPostData({creator:'',title:'',message:'',tags:'',selectedFile:''});};return/*#__PURE__*/_jsx(Paper,{className:classes.paper,children:/*#__PURE__*/_jsxs(\"form\",{autoComplete:\"off\",noValidate:true,className:\"\".concat(classes.root,\" \").concat(classes.form),onSubmit:handleSubmit,children:[/*#__PURE__*/_jsxs(Typography,{variant:\"h6\",children:[currentId?'Editing':'Creating',\" a Memory\"]}),/*#__PURE__*/_jsx(TextField,{name:\"creator\",variant:\"outlined\",label:\"Creator\",fullWidth:true,value:postData.creator,onChange:function onChange(e){return setPostData(_objectSpread(_objectSpread({},postData),{},{creator:e.target.value}));}}),/*#__PURE__*/_jsx(TextField,{name:\"title\",variant:\"outlined\",label:\"Title\",fullWidth:true,value:postData.title,onChange:function onChange(e){return setPostData(_objectSpread(_objectSpread({},postData),{},{title:e.target.value}));}}),/*#__PURE__*/_jsx(TextField,{name:\"message\",variant:\"outlined\",label:\"Message\",fullWidth:true,value:postData.message,onChange:function onChange(e){return setPostData(_objectSpread(_objectSpread({},postData),{},{message:e.target.value}));}}),/*#__PURE__*/_jsx(TextField,{name:\"tags\",variant:\"outlined\",label:\"Tags\",fullWidth:true,value:postData.tags,onChange:function onChange(e){return setPostData(_objectSpread(_objectSpread({},postData),{},{tags:e.target.value.split(',')}));}}),/*#__PURE__*/_jsx(\"div\",{className:classes.fileInput,children:/*#__PURE__*/_jsx(FileBase,{type:\"file\",multiple:false,onDone:function onDone(_ref2){var base64=_ref2.base64;return setPostData(_objectSpread(_objectSpread({},postData),{},{selectedFile:base64}));}})}),/*#__PURE__*/_jsx(Button,{className:classes.buttonSubmit,variant:\"contained\",color:\"primary\",size:\"large\",type:\"submit\",fullWidth:true,children:\"Submit\"}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"secondary\",size:\"small\",onClick:clear,fullWidth:true,children:\"Clear\"})]})});};export default Form;","map":{"version":3,"sources":["/home/decoz/Projects/ReactJS/mern_memo_project/client/src/components/Form/Form.js"],"names":["React","useEffect","useState","TextField","Button","Typography","Paper","useDispatch","FileBase","useSelector","useStyles","createPost","updatePost","getPosts","Form","currentId","setCurrentId","classes","creator","title","message","tags","selectedFile","postData","setPostData","post","state","posts","find","p","_id","dispatch","handleSubmit","e","preventDefault","clear","paper","root","form","target","value","split","fileInput","base64","buttonSubmit"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { TextField, Button, Typography, Paper } from '@material-ui/core'\nimport { useDispatch } from 'react-redux'\nimport FileBase from 'react-file-base64'\nimport { useSelector } from 'react-redux'\n\nimport useStyles from './styles'\nimport { createPost, updatePost, getPosts } from '../../actions/posts'\n\nconst Form = ({ currentId, setCurrentId }) => {\n    const classes = useStyles()\n    const [ postData, setPostData] = useState({ creator : '', title : '', message : '', tags : '', selectedFile: '', })\n    const post = useSelector((state) => currentId ? state.posts.find((p) => p._id === currentId) : null ) // posts is from reducer\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        if(post) setPostData(post)\n    }, [post])\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n\n        if(currentId){\n\n            dispatch(updatePost(currentId, postData))\n        }else{\n            dispatch(createPost(postData))\n        }\n        clear()\n        dispatch(getPosts())\n    }\n\n    const clear = () => {\n        setCurrentId(0)\n        setPostData({ creator : '', title : '', message : '', tags : '', selectedFile: '', })\n    }\n\n  return (\n        <Paper className={classes.paper}>\n            <form autoComplete='off' noValidate className={`${classes.root} ${classes.form}`} onSubmit={handleSubmit}>\n                <Typography variant='h6'>{ currentId ? 'Editing' : 'Creating'} a Memory</Typography>\n                <TextField \n                name='creator' \n                variant='outlined' \n                label='Creator' \n                fullWidth \n                value={postData.creator} \n                onChange={(e) => setPostData({ ...postData, creator : e.target.value })} \n                />\n                <TextField \n                name='title' \n                variant='outlined' \n                label='Title' \n                fullWidth \n                value={postData.title} \n                onChange={(e) => setPostData({ ...postData, title : e.target.value })} \n                />\n                <TextField \n                name='message' \n                variant='outlined' \n                label='Message' \n                fullWidth \n                value={postData.message} \n                onChange={(e) => setPostData({ ...postData, message : e.target.value })} \n                />\n                <TextField \n                name='tags' \n                variant='outlined' \n                label='Tags' \n                fullWidth \n                value={postData.tags} \n                onChange={(e) => setPostData({ ...postData, tags : e.target.value.split(',') })} \n                />\n                <div className={classes.fileInput}>\n                    <FileBase \n                    type=\"file\" \n                    multiple={false} \n                    onDone={({ base64 }) => setPostData({ ...postData, selectedFile: base64 })} />\n                </div>\n                <Button className={classes.buttonSubmit} variant='contained' color='primary' size='large' type='submit' fullWidth >Submit</Button>\n                <Button variant='contained' color='secondary' size='small' onClick={clear} fullWidth >Clear</Button>\n            </form>\n        </Paper>\n    )\n}\n\nexport default Form"]},"metadata":{},"sourceType":"module"}